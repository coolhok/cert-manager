apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "cert-manager.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: {{ template "cert-manager.name" . }}
    chart: {{ template "cert-manager.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  # Create a selfsigned Issuer, in order to create a root CA certificate for
  # signing webhook serving certificates
  issuer-selfsign.yaml: |-
    apiVersion: certmanager.k8s.io/v1alpha1
    kind: Issuer
    metadata:
      name: "{{ template "cert-manager.webhook.selfSignedIssuer" . }}"
      namespace: {{ .Release.Namespace | quote }}
    spec:
      selfsigned: {}
    status:
      # Manually set a ready: true condition, as during bootstrap the Issuer controller
      # will not be able to mark the Issuer as ready, blocking the Certificate being fulfilled
      conditions:
      - type: Ready
        status: "True"
        reason: "Manually set ready status"

  # Generate a CA Certificate used to sign certificates for the webhook
  cert-webhook-ca.yaml: |-
    apiVersion: certmanager.k8s.io/v1alpha1
    kind: Certificate
    metadata:
      name: "{{ template "cert-manager.webhook.rootCACertificate" . }}"
      namespace: {{ .Release.Namespace | quote }}
    spec:
      secretName: "{{ template "cert-manager.webhook.rootCACertificate" . }}"
      issuerRef:
        name: "{{ template "cert-manager.webhook.selfSignedIssuer" . }}"
      commonName: "ca.webhook.cert-manager"
      isCA: true

  # Create an Issuer that uses the above generated CA certificate to issue certs
  issuer-webhook-ca.yaml: |-
    apiVersion: certmanager.k8s.io/v1alpha1
    kind: Issuer
    metadata:
      name: "{{ template "cert-manager.webhook.issuer" . }}"
      namespace: {{ .Release.Namespace | quote }}
    spec:
      ca:
        secretName: "{{ template "cert-manager.webhook.rootCACertificate" . }}"
    status:
      # Manually set a ready: true condition, as during bootstrap the Issuer controller
      # will not be able to mark the Issuer as ready, blocking the Certificate being fulfilled
      conditions:
      - type: Ready
        status: "True"
        reason: "Manually set ready status"

  # Finally, generate a serving certificate for the webhook to use
  cert-webhook-tls.yaml: |-
    apiVersion: certmanager.k8s.io/v1alpha1
    kind: Certificate
    metadata:
      name: "{{ template "cert-manager.webhook.certificate" . }}"
      namespace: {{ .Release.Namespace | quote }}
    spec:
      secretName: "{{ template "cert-manager.webhook.certificate" . }}"
      issuerRef:
        name: "{{ template "cert-manager.webhook.issuer" . }}"
      dnsNames:
      - "{{ template "cert-manager.webhook.serviceName" . }}"
      - "{{ template "cert-manager.webhook.serviceName" . }}.{{ .Release.Namespace }}"
      - "{{ template "cert-manager.webhook.serviceName" . }}.{{ .Release.Namespace }}.svc"
